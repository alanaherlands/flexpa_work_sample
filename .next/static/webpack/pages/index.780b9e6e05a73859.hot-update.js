"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pages/api/apiRequests.ts":
/*!**********************************!*\
  !*** ./pages/api/apiRequests.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAccessToken: function() { return /* binding */ getAccessToken; },\n/* harmony export */   getExplanationOfBenefit: function() { return /* binding */ getExplanationOfBenefit; },\n/* harmony export */   getPatientId: function() { return /* binding */ getPatientId; }\n/* harmony export */ });\n// Get request - get access token\nconst getAccessToken = async (publicToken)=>{\n    try {\n        const { href } = new URL(\"http://localhost:9000/\");\n        const response = await fetch(\"\".concat(href, \"link/exchange\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                publicToken\n            })\n        });\n        console.log(\"Flexpa Public API Base URL - \", \"https://api.flexpa.com\");\n        console.log(\"getAccessToken - Response:\", response);\n        if (!response.ok) {\n            const errorMessage = \"Failed to obtain access token.\";\n            const status = response.status;\n            throw Object.assign(new Error(errorMessage), {\n                status\n            });\n        }\n        const exchangeTokenData = await response.json();\n        console.log(\"Exchange Token Data:\", exchangeTokenData);\n        return exchangeTokenData.data.access_token;\n    } catch (error) {\n        console.error(\"Error in getAccessToken:\", {\n            message: error instanceof Error ? error.message : error,\n            status: error instanceof Error && \"status\" in error ? error.status : undefined\n        });\n        return null;\n    }\n};\n// Get request - get patient ID\nconst getPatientId = async (accessToken)=>{\n    try {\n        const response = await fetch(\"/link/introspect\", {\n            method: \"POST\",\n            headers: {\n                \"Access-Token\": accessToken,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        console.log(\"getPatientId - Response:\", response); // Log the response\n        if (!response.ok) {\n            const errorMessage = \"Failed to obtain patient ID\";\n            const status = response.status;\n            console.error(\"getPatientId - HTTP Error:\", {\n                message: errorMessage,\n                status\n            });\n            throw Object.assign(new Error(errorMessage), {\n                status\n            });\n        }\n        const introspectTokenData = await response.json();\n        // use URL constructor to extract the pathname\n        const url = new URL(introspectTokenData.data.sub);\n        // extract last part of the pathname\n        const patientId = url.pathname.split(\"/\").pop();\n        return patientId || null;\n    } catch (error) {\n        console.error(\"Error in getPatientId:\", {\n            message: error instanceof Error ? error.message : error,\n            status: error instanceof Error && \"status\" in error ? error.status : undefined\n        });\n        return null;\n    }\n};\n// Get request - get explanation of benefit\nconst getExplanationOfBenefit = async (patientId, accessToken)=>{\n    try {\n        const response = await fetch(\"/fhir/ExplanationOfBenefit?patient=\".concat(patientId), {\n            method: \"GET\",\n            headers: {\n                \"Access-Token\": accessToken,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        console.log(\"getExplanationOfBenefit - Response:\", response); // Log the response\n        if (!response.ok) {\n            const errorMessage = \"Failed to obtain Explanation of Benefit data.\";\n            const status = response.status;\n            console.error(\"getExplanationOfBenefit - HTTP Error:\", {\n                message: errorMessage,\n                status\n            });\n            throw Object.assign(new Error(errorMessage), {\n                status\n            });\n        }\n        // parse JSON data from response\n        const eobData = await response.json();\n        // return data property from parsed JSON or null if data is not present\n        return eobData.data || null;\n    } catch (error) {\n        console.error(\"Error in getExplanationOfBenefit:\", {\n            message: error instanceof Error ? error.message : error,\n            status: error instanceof Error && \"status\" in error ? error.status : undefined\n        });\n        return null;\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/api/apiRequests.ts\n"));

/***/ })

});